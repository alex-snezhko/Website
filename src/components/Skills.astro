---
import { ALL_SKILLS, LANGUAGES, FRAMEWORKS, TOOLS } from "../utils/skills";
import type { Skill } from "../utils/skills";

// make sure to keep same as $mainWidth scss variable
const CIRCLE_SIZE = 1100;
const TEXT_RADIUS = (CIRCLE_SIZE - 80) / 2;
const ARC_THICKNESS = 170;
const CIRCLE_RADIUS = TEXT_RADIUS - (ARC_THICKNESS / 2) - 20;

// angle of seperation between elements (in radians)
// + 1.5 because each section has a half image gap and there are 3 sections
const ANGLE_SEP = 2 * Math.PI / (ALL_SKILLS.length + 1.5);
// angle that the first element in each set (fundamentals,
// languages, etc.) should be transformed by
const ANGLE_FIRST = -(Math.PI / 2) + (3 / 4) * ANGLE_SEP;

// find angles on circle at which sections seperate
const DIV_ANGLES = [];
DIV_ANGLES[0] = Math.PI / 2;
DIV_ANGLES[1] = DIV_ANGLES[0] - (FRAMEWORKS.length + 0.5) * ANGLE_SEP;
DIV_ANGLES[2] = DIV_ANGLES[1] - (TOOLS.length + 0.5) * ANGLE_SEP;

const getXY = (radius: number, angle: number) => ({
  x: CIRCLE_SIZE / 2 + radius * Math.cos(angle),
  y: CIRCLE_SIZE / 2 - radius * Math.sin(angle)
});

// find x and y coordinates on svg for beginning of arc segments
const ARC_BEGINS = DIV_ANGLES.map(angle => getXY(CIRCLE_RADIUS, angle));

const svgPathD = (begin: { x: number, y: number }, end: { x: number, y: number }, radius: number, upsideDown: boolean) => upsideDown
  ? `M ${end.x} ${end.y} A ${radius + 20} ${radius + 20} 0 0 0 ${begin.x} ${begin.y}`
  : `M ${begin.x} ${begin.y} A ${radius} ${radius} 0 0 1 ${end.x} ${end.y}`;

interface CurveInfo {
  fullName: string;
  shortName: string;
  upsideDown: boolean;
  textAngleInfo: { begin: { x: number, y: number }, end: { x: number, y: number }}
}

const getTextInfo = (textAngle: number, upsideDown: boolean) => ({
  begin: getXY(TEXT_RADIUS + (upsideDown ? 20 : 0), textAngle),
  end: getXY(TEXT_RADIUS + (upsideDown ? 20 : 0), textAngle - 2)
})

const CURVES: CurveInfo[] = [
  { fullName: "Programming Languages", shortName: "langs", upsideDown: false, textAngleInfo: getTextInfo(3.1, false) },
  { fullName: "Libraries/Frameworks", shortName: "frameworks", upsideDown: false, textAngleInfo: getTextInfo(7.2, false) },
  { fullName: "Tools/Software", shortName: "tools", upsideDown: true, textAngleInfo: getTextInfo(6.9, true) }
];
      
function getTrans(i: number) {
  // additional offset to make seperate sections not touch
  const add = (i < FRAMEWORKS.length) ? 0 : (i < FRAMEWORKS.length + TOOLS.length) ? 0.5 : 1;

  const angle = ANGLE_FIRST + (i + add) * ANGLE_SEP;
  const transform = `translate(-50%, -50%) rotate(${angle}rad) translate(${CIRCLE_RADIUS}px) rotate(${-angle}rad)`;
  return transform;
}

const SKILLS_INFO: [string, Skill[]][] = [
  ["Programming Languages", LANGUAGES],
  ["Libraries/Frameworks", FRAMEWORKS],
  ["Tools/Software", TOOLS],
];
---

<style lang="scss">
  @use "../styles/shared";

  #skills-circle {
    position: relative;
    border-radius: 50%;
    margin: auto;
    text-align: center;
    margin-top: -50px;
  }

  text {
    fill: rgb(63, 101, 112);
    font-size: 1.75rem;
  }

  :root.dark-mode text {
    fill: rgb(151, 179, 187);
  }

  $lightestColor: hsl(184, 45%, 87%);

  .arc-fill-langs {
    stroke: $lightestColor;
  }

  .arc-fill-frameworks {
    stroke: darken($lightestColor, 4%);
  }

  .arc-fill-tools {
    stroke: darken($lightestColor, 8%);
  }

  $darkestColor: hsl(189, 29%, 31%);

  :root.dark-mode .arc-fill-langs {
    stroke: lighten($darkestColor, 6%);
  }

  :root.dark-mode .arc-fill-frameworks {
    stroke: lighten($darkestColor, 3%);
  }

  :root.dark-mode .arc-fill-tools {
    stroke: $darkestColor;
  }

  .skill-picture {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 95px;
    height: 95px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: 0.5s;

    &:hover {
      width: 120px;
      height: 120px;
    }

    img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
    }
  }

  #skill-info {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 450px;
    transition: opacity 0.5s;
    opacity: 0;
  }

  #skill-info-placeholder {
    font-size: 3em;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 450px;
    transition: opacity 0.5s;
    opacity: 1;
    margin: 0;
  }

  #info-image {
    max-width: 250px;
    max-height: 250px;
    object-fit: contain;
  }

  #info-name {
    font-size: 2.75rem;
    margin: 15px;
  }

  // for alternate display when screen too small
  #skills-normal {
    display: none;
  }

  .skills-section {
    // background-color: #eee;
    // border-radius: 16px;
    // padding: 10px;
    margin-bottom: 50px;
  }

  .skill-container {
    display: flex;
    // align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 20px;
    gap: 10px;
  }

  .skill-alternate {
    background-color: hsl(210, 15%, 96%);
    box-shadow: 0 0 4px hsl(182, 10%, 73%);
    text-align: center;
    width: 105px;
    padding: 15px 0;
    border-radius: 14px;

    p {
      margin-bottom: 0;
      font-weight: bold;
    }
  }

  .skill-picture-alternate {
    margin: auto;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;

    img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
    }
  }

  :root.dark-mode .skill-alternate {
    background-color: hsl(210, 1%, 27%);
    // background-color: hsl(240, 1%, 23%);
    box-shadow: 0 0 6px hsl(180, 2%, 25%);
  }

  @media (max-width: shared.$mainWidth) {
    #skills-circle {
      display: none;
    }

    #skills-normal {
      display: block;
      text-align: center;
    }
  }
</style>

<script>
  const skills = document.getElementsByClassName("skill-picture");
  const skillInfo = document.getElementById("skill-info")!;
  const skillInfoPlaceholder = document.getElementById("skill-info-placeholder")!;
  const infoImg = document.getElementById("info-image")!;
  const infoName = document.getElementById("info-name")!;
  const infoExtra = document.getElementById("info-extra")!;
  let fadeTimeout: number | undefined;

  for (let i = 0; i < skills.length; i++) {
    const skill = skills[i];
    skill.addEventListener("mouseenter", () => {
      clearTimeout(fadeTimeout);
      const img = skill.firstElementChild!;

      skillInfoPlaceholder.style.visibility = "hidden";
      skillInfoPlaceholder.style.opacity = "0";
      skillInfo.style.visibility = "visible";
      skillInfo.style.opacity = "1";

      infoImg.setAttribute("src", img.getAttribute("src")!);
      infoName.innerHTML = img.getAttribute("alt")!;
      infoExtra.innerHTML = img.getAttribute("data-desc")!;
    });
    skill.addEventListener("mouseleave", () => {
      fadeTimeout = setTimeout(() => {
        skillInfo.style.visibility = "hidden";
        skillInfoPlaceholder.style.opacity = "1";
        skillInfoPlaceholder.style.visibility = "visible"
      }, 500);
      skillInfo.style.opacity = "0";
    });
  }
</script>

<div>
  <div id="skills-circle" style={{ width: CIRCLE_SIZE, height: CIRCLE_SIZE }}>
    <svg xmlns="http://www.w3.org/2000/svg" style={{ width: CIRCLE_SIZE, height: CIRCLE_SIZE }} width={CIRCLE_SIZE} height={CIRCLE_SIZE}>
      {CURVES.map((curve, i) => (
        <>
          <path
            class={`arc-fill-${curve.shortName}`}
            fill="none"
            stroke-width={ARC_THICKNESS}
            d={svgPathD(ARC_BEGINS[i], ARC_BEGINS[(i + 1) % 3], CIRCLE_RADIUS, false)}
          />

          <path
            fill="none"
            id={`${curve.shortName}-curve`}
            d={svgPathD(curve.textAngleInfo.begin, curve.textAngleInfo.end, TEXT_RADIUS, curve.upsideDown)}
          />

          <text width="500">
            <textPath xlink:href={`#${curve.shortName}-curve`}>
              {curve.fullName}
            </textPath>
          </text>
        </>
      ))}
    </svg>

    {ALL_SKILLS.map((item, i) => (
      <div class="skill-picture" style={{ transform: getTrans(i) }}>
        <img src={item.imgUrl} alt={item.name} data-desc={item.description} />
      </div>
    ))}

    <h1 id="skill-info-placeholder">Hover over an icon to view details</h1>
    <div id="skill-info">
      <img id="info-image" src="" alt="" />
      <h1 id="info-name"></h1>
      <h2 id="info-extra" style={{ color: "gray" }}></h2>
    </div>
  </div>

  <div id="skills-normal">
    {SKILLS_INFO.map(([name, skills]) => (
      <div class="skills-section">
        <h2>{name}</h2>
        <div class="skill-container">
          {skills.map(item => (
            <div class="skill-alternate">
              <div class="skill-picture-alternate">
                <img src={item.imgUrl} alt={item.name} data-desc={item.description} />
              </div>
              <p>{item.name}</p>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>
